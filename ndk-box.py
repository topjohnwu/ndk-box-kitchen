#!/usr/bin/env python3

import argparse
import subprocess
import os
import json
import sys
import logging

from pathlib import Path
from collections import namedtuple


def header(string):
    # print header title
    print("\n\033[44m%s\033[0m\n" % string)


def apply_patch(src_path, patch_path):
    """Attempts to apply the busybox/toybox patches."""

    if os.path.isfile(os.path.join(src_path, '.git/config')):
        src_git = True

    # Test the patch with '--dry-run' before actually applying the patch.
    test_patch_cmd = [
        'patch', '--dry-run', '-f', '-p1', '-E', '--no-backup-if-mismatch',
        '-i', patch_path
    ]

    # Cmd to apply a patch in the src unpack path.
    apply_patch_git_cmd = ['git', 'am', '-3', patch_path]

    apply_patch_cmd = [
        'patch', '-f', '-p1', '-E', '--no-backup-if-mismatch', '-i', patch_path
    ]

    try:
        check_output(test_patch_cmd, cwd=src_path)
    except subprocess.CalledProcessError:
        # Test run on the patch failed to apply.
        return False

    # Test run succeeded on the patch.
    if src_git:
        check_output(apply_patch_git_cmd, cwd=src_path)
    else:
        check_output(apply_patch_cmd, cwd=src_path)

    return True


def result(patch_info):
    """Prints the results of handling the patches of busybox/toybox."""

    if patch_info.applied_patches:
        print("\033[01;32m\nThe following patches applied successfully:\033[0m")
        print('\n'.join(patch_info.applied_patches))

    if patch_info.failed_patches:
        print("\033[01;31m\nThe following patches failed to apply:\033[0m")
        print('\n'.join(patch_info.failed_patches))


def check_output(cmd, cwd=None):
    return subprocess.check_output(cmd, encoding='UTF-8', cwd=cwd)


def handle_patch(target, src_path):
    # A list of patches that successfully applied.
    applied_patches = []

    # A list of patches that failed to apply.
    failed_patches = []

    with open(
            os.path.join(
                os.getcwd(),
                '{var}_patches/{var}.json').format(var=target)) as patch_config:
        metadata = json.load(patch_config)

    for current_patch in metadata:
        patch_path = os.path.join(os.getcwd(), '{}_patches',
                                  current_patch['patch_name']).format(target)

        patch_applied = apply_patch(src_path, patch_path)
        if not patch_applied:  # Failed to apply patch.
            failed_patches.append(os.path.basename(patch_path))
        else:
            applied_patches.append(os.path.basename(patch_path))

        # Create a namedtuple of the patch results.
        PatchInfo = namedtuple('PatchInfo',
                               ['applied_patches', 'failed_patches'])

        patch_info = PatchInfo(applied_patches=applied_patches,
                               failed_patches=failed_patches)

    return patch_info


def generate_config(target, src_path):
    """Run ndk-box.sh to generate necessary files for ndk-build"""

    # Run ndk-box.sh
    ndk_box_sh = [
        os.path.join(os.getcwd(), 'ndk-box.sh'), '--target', target,
        '--src_path', src_path, '--ndk-box_dir',
        os.getcwd()
    ]

    subprocess.run(ndk_box_sh, check=True, cwd=src_path.as_posix())


def do_commit(target, src_path):
    """git commit the  changes and Makefiles automatically"""

    busybox_cmd = """
    git add -f include/*.h && git add *.mk && git commit -m "busybox: Add generated files for ndk-build" -m "Auto generated by ndk-box-kitchen"
    """
    toybox_cmd = """
    git add -f generated/*.h && git add *.mk && git commit -m "toybox: Add generated files for ndk-build" -m "Auto generated by ndk-box-kitchen"
    """

    if target == 'busybox':
        subprocess.run(busybox_cmd, check=True, cwd=src_path, shell=True)
    else:
        subprocess.run(toybox_cmd, check=True, cwd=src_path, shell=True)


def verify_args(target, src_path):
    """verify the given args before proceeding further"""

    if not target:
        raise ValueError('No target provided. Choose between busybox or toybox')

    if target != "busybox" and target != "toybox":
        raise ValueError('Invalid target provided: %s' % target)

    if not os.path.isdir(src_path):
        raise ValueError(
            'Please clone %s in the same directory of this script and checkout the correct tag'
            % target)


def GetCommandLineArgs():
    """Get the required arguments from the command line."""

    # Create parser and add optional command-line arguments.
    parser = argparse.ArgumentParser(
        description='A manager for busybox and toybox.')

    # https://stackoverflow.com/questions/24180527/argparse-required-arguments-listed-under-optional-arguments/24181138
    optional = parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    parser._action_groups.append(optional)

    # Add argument for the absolute path to the unpacked sources.
    required.add_argument(
        '--target',
        type=str,
        choices=['busybox', 'toybox'],
        default=None,
        required=True,
        help=
        'specify busybox or toybox as target to patch and generate files for ndk-build'
    )

    parser.add_argument(
        '--patch',
        action='store_true',
        help=
        'apply busybox or toybox patches to the absolute source of busybox or toybox'
    )

    parser.add_argument(
        '--generate',
        action='store_true',
        help=
        'generate required files for ndk-build in the absolute source path of busybox or toybox'
    )

    parser.add_argument(
        '--commit',
        action='store_true',
        help=
        'git commit the patches and generated files for ndk-build automatically'
    )

    # Parse the command line.
    args_output = parser.parse_args(None if sys.argv[1:] else ['--help'])

    return args_output


def main():
    """Applies patches to the source tree and takes action on a failed patch."""
    args_output = GetCommandLineArgs()

    # use the same path as it was defined in busybox.sh and toybox.sh
    src_path = Path(os.path.join(os.getcwd(), '{}'.format(args_output.target)))
    verify_args(args_output.target, src_path)
    # Get the results of handling the patches of the package.
    if args_output.patch:
        header('Applying %s patches for ndk-build' % args_output.target)
        patch_info = handle_patch(args_output.target, src_path)
        result(patch_info)
    if args_output.generate:
        generate_config(args_output.target, src_path)
    if args_output.commit:
        header('commit patches and generated Makefiles of %s for ndk-build' %
               args_output.target)
        do_commit(args_output.target, src_path)


if __name__ == '__main__':
    main()
